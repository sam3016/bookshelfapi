// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: books.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (id, created_at, updated_at, title, volume, category, author, published_at, publisher, finished, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, created_at, updated_at, title, volume, category, author, published_at, publisher, finished, user_id
`

type CreateBookParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Volume      int32
	Category    string
	Author      string
	PublishedAt time.Time
	Publisher   string
	Finished    bool
	UserID      uuid.UUID
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Volume,
		arg.Category,
		arg.Author,
		arg.PublishedAt,
		arg.Publisher,
		arg.Finished,
		arg.UserID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Volume,
		&i.Category,
		&i.Author,
		&i.PublishedAt,
		&i.Publisher,
		&i.Finished,
		&i.UserID,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books WHERE id = $1 AND user_id = $2
`

type DeleteBookParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteBook(ctx context.Context, arg DeleteBookParams) error {
	_, err := q.db.ExecContext(ctx, deleteBook, arg.ID, arg.UserID)
	return err
}

const getBooks = `-- name: GetBooks :many
SELECT id, created_at, updated_at, title, volume, category, author, published_at, publisher, finished, user_id FROM books
`

func (q *Queries) GetBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Volume,
			&i.Category,
			&i.Author,
			&i.PublishedAt,
			&i.Publisher,
			&i.Finished,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books
SET title = $3, volume = $4, category = $5, author = $6, published_at = $7, publisher = $8, finished = $9, updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, created_at, updated_at, title, volume, category, author, published_at, publisher, finished, user_id
`

type UpdateBookParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Title       string
	Volume      int32
	Category    string
	Author      string
	PublishedAt time.Time
	Publisher   string
	Finished    bool
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Volume,
		arg.Category,
		arg.Author,
		arg.PublishedAt,
		arg.Publisher,
		arg.Finished,
	)
	return err
}
